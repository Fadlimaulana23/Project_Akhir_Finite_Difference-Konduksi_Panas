#Satu Dimensi

import numpy as np
import matplotlib.pyplot as plt

# Mendefinisikan Variabel
a = 500  # Koefisien Difusivitas Termal [m^2/s]
panjang = 2.5  # Panjang plat [m]
waktu = 1  # Waktu simulasi [s]
node = 50  # Jumlah titik grid

dx = panjang / node  # Jarak antar titik grid [m]
dt = 0.5 * dx ** 2 / a  # Ukuran waktu simulasi [s]
t_n = int(waktu / dt)  # Jumlah iterasi simulasi
u = np.linspace(100, 0, node)  # Suhu awal plat [degC], different initial condition

# Kondisi Batas
u[0] = 0  # Suhu ujung kiri plat [degC]
u[-1] = 100  # Suhu ujung kanan plat [degC]

# Visualisasi
fig, ax = plt.subplots()
ax.set_xlabel("x (cm)")
pcm = ax.pcolormesh([u], cmap=plt.cm.jet, vmin=0, vmax=100)  # Plot distribusi
plt.colorbar(pcm, ax=ax)
ax.set_ylim([-2, 3])  # Batas skala y

w = u.copy()  # Menyalin data suhu untuk perhitungan
counter = dt  # Initialize counter to represent time after the first iteration
for _ in range(t_n):  # Loop sebanyak t_n iterasi
    for i in range(1, node - 1):  # Melooping setiap titik grid kecuali batas
        u[i] = (dt * a * (w[i - 1] - 2 * w[i] + w[i + 1]) / dx ** 2) + w[i]  # Perhitungan suhu baru berdasarkan persamaan difusi panas
    counter += dt  # Menambah waktu simulasi
    print("t: {:.3f} s, Suhu rata-rata: {:.2f} Celcius".format(counter, np.mean(u)))
    # Menampilkan waktu dan suhu rata-rata
    # Memperbarui plot
    pcm.set_array([u])
    ax.set_title("Distribusi Suhu pada t: {:.3f} s".format(counter))
    plt.pause(0.01)  # Pause to update the plot

plt.show()  # Menampilkan plot setelah simulasi selesai



#Dua Dimensi 
import numpy as np
import matplotlib.pyplot as plt

# Mendefinisikan Variabel
a = 50 # Koefisien Difusivitas Termal
panjang = 0.5 # Panjang plat [mm]
waktu = 1.5 # Waktu simulasi [s]
node = 50 # Jumlah titik grid

dx = panjang / node # Jarak antar titik grid pada x [mm]
dy = panjang / node # Jarak antar titik grid pada y [mm]
dt = min ( dx **2 / (4 * a ) , dy **2 / (4 * a )) # Ukuran langkah waktu [s] ( pilih yanglebih kecil agar stabil )
t_nodes = int( waktu / dt ) # Jumlah iterasi simulasi
u = np . zeros (( node , node ) ) + 20 # Suhu awal plat [ degC ] (2 dimensi )

#Kondisi Awal (B.C) saat (t = 0):
u[0, :] = 0 # Suhu tepi kiri
u[1, :] = 100 # Suhu tepi kanan
u[:, 0] = np.linspace(0, 100, node) # Suhu tepi bawah (variasi linear)
u[:, 1] = np.linspace(0, 100, node) # Suhu tepi atas (variasi linear)

 # Visualisasi distribusi suhu awal
fig , ax = plt . subplots ()
ax . set_ylabel ("y (cm)")
ax . set_xlabel ("x (cm)")
pcm = ax . pcolormesh (u , cmap = plt . cm . jet , vmin =0 , vmax =100)
plt . colorbar ( pcm , ax = ax )

counter = 0
w = u . copy () # Menyalin data suhu untuk perhitungan
# Looping setiap titik grid kecuali batas
for i in range (1 , node -1) :
    for j in range (1 , node -1) :
        # Menghitung perubahan suhu berdasarkan persamaan Laplace 2D ( menggunakantetangga terdekat )
        dd_ux = ( w [i -1 , j ] - 2* w [i , j ] + w [ i +1 , j ]) / dx **2
        dd_uy = ( w [i , j -1] - 2* w [i , j ] + w [i , j +1]) / dy **2
        u [i , j ] = dt * a * ( dd_ux + dd_uy ) + w [i , j ] # Suhu baru dihitung danditambahkan ke suhu lama

t_mean = np . mean ( u )
print ( f"t: { counter :.3f} s, Suhu rata - rata : { t_mean :.2f} Celcius ")

# Memperbarui plot dan menampilkan waktu simulasi
pcm . set_array ( u )
ax . set_title ( f" Distribusi Suhu t: { counter :.3f} s, suhu rata - rata ={ t_mean :.2f}")
